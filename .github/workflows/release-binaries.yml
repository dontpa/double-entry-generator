name: Release Binaries

on:
  push:
    tags: ['v*', 'v*.*', 'v*.*.*']  # 打任意 v 前缀 tag 触发
  workflow_dispatch:                # 也支持手动触发（仅产物，不发 Release）

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos:   [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod' }

      - name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BIN="double-entry-generator"
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT="dist/${BIN}_${GOOS}_${GOARCH}${EXT}"
          go build -trimpath -ldflags="-s -w" -o "$OUT" ./.
          # 打包
          if [ "$GOOS" = "windows" ]; then
            (cd dist && zip -q "${BIN}_${GOOS}_${GOARCH}.zip" "$(basename "$OUT")")
            rm -f "$OUT"
          else
            tar -C dist -czf "dist/${BIN}_${GOOS}_${GOARCH}.tar.gz" "$(basename "$OUT")"
            rm -f "$OUT"
          fi

      - name: Upload matrix artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/*

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}